class Solution {
    fun solution(sizes: Array<IntArray>): Int {
        var answer: Int = 0                // 지갑의 최종 크기
        var answer2 = mutableListOf<Int>()        // 지갑의 가로 길이를 저장할 리스트
        var answer3 = mutableListOf<Int>()        // 지갑의 세로 길이를 저장할 리스트
        
        for (num in sizes) {                     // sizes라는 이차원 배열의 요소를 하나하나 꺼내서
            if (num[0] > num[1]) {               // 그 안에 있는 요소들을 비교
                answer2 += num[0]                 // 그 중 큰 값을 가로 길이로 추가
                answer3 += num[1]                // 작은 값을 세로 길이로 추가
            } else if (num[0] < num[1]) {
                answer2 += num[1]
                answer3 += num[0]
            } else if (num[0] == num[1]) {
                answer2 += num[0]
                answer3 += num[0]
            }
        }
        
        val result = answer2.maxOrNull()?: 0   // 가로 길이 집합 중 모든 명함이 들어갈려면 가장 큰 크기여야 함
        
        var result2 = answer3.maxOrNull()?: 0  // 세로 길이 역시 가장 큰 크기여야 함
        
        answer = result * result2           // 두 개를 곱해서 최종 지갑 크기를 구함
        
        return answer
    }   
}
